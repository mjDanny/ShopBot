from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
import os

router = Router()


class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_comment = State()


@router.callback_query(Text(startswith="order_"))
async def start_order(callback: CallbackQuery, state: FSMContext):
    try:
        service_name = callback.data.split("_", 1)[1]
        await state.update_data(service_name=service_name)
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(OrderStates.waiting_for_name)
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.message(OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    await state.update_data(name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXX...:")
    await state.set_state(OrderStates.waiting_for_phone)


@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text.startswith("+"):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'")
        return

    await state.update_data(phone=message.text)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:")
    await state.set_state(OrderStates.waiting_for_comment)


@router.message(OrderStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        text = (
            "‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
            f"üìå –£—Å–ª—É–≥–∞: {user_data['service_name']}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['name']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['phone']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}"
        )

        await message.bot.send_message(
            chat_id=os.getenv("MANAGER_CHAT_ID"),
            text=text
        )
        await message.answer("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
    finally:
        await state.clear()