from aiogram import Router, types
from aiogram import F
from database import get_services
from keyboards.services import services_keyboard

import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üìã –£—Å–ª—É–≥–∏")
async def show_services(message: types.Message):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ª—É–≥ –≤—ã–∑–≤–∞–Ω!")
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å–ª—É–≥–∏")
        services = await get_services()

        if not services:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("üòû –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        for service in services:
            name, desc, price, examples = service
            response = (
                f"<b>{name}</b>\n\n"
                f"<i>{desc}</i>\n\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                f"üñº –ü—Ä–∏–º–µ—Ä—ã: {examples}"
            )
            await message.answer(
                text=response,
                reply_markup=services_keyboard(name)
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: {name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É—Å–ª—É–≥: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥")
