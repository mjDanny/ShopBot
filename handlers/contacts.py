from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import logging

router = Router()
logger = logging.getLogger(__name__)


class ContactStates(StatesGroup):
    waiting_for_contact = State()


async def validate_chat_id(bot, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    try:
        await bot.get_chat(chat_id)
        return True
    except Exception as e:
        logger.error(f"Chat validation failed: {str(e)}")
        return False


@router.message(F.text == "üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def request_contact(message: types.Message, state: FSMContext):
    await state.set_state(ContactStates.waiting_for_contact)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")


@router.message(ContactStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º chat_id
        manager_chat_id = int(os.getenv("MANAGER_CHAT_ID"))
        logger.info(f"Attempting to send to chat: {manager_chat_id}")

        if not await validate_chat_id(message.bot, manager_chat_id):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É —á–∞—Ç—É")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.bot.send_message(
            chat_id=manager_chat_id,
            text=f"üì© –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç @{message.from_user.username}:\n{message.text}",
        )
        logger.info(f"Message sent to {manager_chat_id} successfully")

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        await state.clear()

    except ValueError:
        logger.error("Invalid MANAGER_CHAT_ID format")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"Critical error: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        await state.clear()
