from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import logging

router = Router()
logger = logging.getLogger(__name__)

class ContactStates(StatesGroup):
    waiting_for_contact = State()

@router.message(F.text == "üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def request_contact(message: types.Message, state: FSMContext):
    await message.answer("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ContactStates.waiting_for_contact)

@router.message(ContactStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    try:
        manager_chat_id = os.getenv("MANAGER_CHAT_ID")
        if not manager_chat_id:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")
            return

        await message.bot.send_message(
            chat_id=int(manager_chat_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            text=f"üì¨ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n{message.text}"
        )
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await state.clear()
